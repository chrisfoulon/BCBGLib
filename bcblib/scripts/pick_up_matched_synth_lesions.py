import os
import argparse
import random
import numpy as np
import json
import csv
import pathlib

import nibabel as nib


def list_synth_les(synth_lesion_size_dict, size, number, size_range=0.1, pick_up_strat='random'):
    if size_range >= 1:
        size_range = size_range / 100
    file_list = []
    for s in synth_lesion_size_dict:
        if size - size_range * size <= s <= size + size_range * size:
            file_list = file_list + synth_lesion_size_dict[s]
            number -= 1
    print(file_list)
    if number < len(file_list):
        number = len(file_list)
    if pick_up_strat == 'random':
        return random.sample(file_list, k=number)
    else:
        return file_list[0:number]


def main():
    output_list_filename = 'synth_lesions_list.csv'
    parser = argparse.ArgumentParser(description='Pick up synth lesion masks matched with the given lesion set from '
                                                 'a dataset generated by *generate_synth_lesions*')
    paths_group = parser.add_mutually_exclusive_group(required=True)
    paths_group.add_argument('-p', '--input_path', type=str, help='Root folder of the lesion dataset')
    paths_group.add_argument('-li-', '--input_list', type=str, help='Text file containing the list of lesion files')
    parser.add_argument('-sd', '--synth_dict', type=str, help='path to the json dictionary file of listing the '
                                                              'synthetic lesions generated by *generate_synth_lesions*',
                        required=True)
    parser.add_argument('-o', '--output', type=str, help='Either output path or output folder. In the latter case '
                                                         'the list will be stored in {}'.format(output_list_filename),
                        required=True)
    parser.add_argument('-ps', '--pickup_strat', type=str, default='random', choices=['random', 'first'],
                        help='synth lesion pick up')
    parser.add_argument('-sr', '--size_range', default=0.1, type=float, help='percentage of size difference to '
                                                                             'pick matching lesions e.g. 0.1 means '
                                                                             '+-10% of the size is considered a match')
    parser.add_argument('-ml', '--multiple_lists', type=int, default=1, help='generate several lists of synthetic '
                                                                             'lesions')
    parser.add_argument('-ex', '--exclude_lists', nargs='*',
                        help='Exclude the paths from the list files given '
                             '(So you can pick up a set without overlap with other ones)')

    # parser.add_argument('-v', '--verbose', default='info', choices=['none', 'info', 'debug'], nargs='?', const='info',
    #                     type=str, help='print info or debugging messages [default is "info"] ')
    args = parser.parse_args()

    if args.input_path is not None:
        les_list = [os.path.join(args.input_path, f) for f in os.listdir(args.input_path)]
    else:
        if not os.path.exists(args.input_list):
            raise ValueError(args.input_list + ' does not exist.')
        if args.input_list.endswith('.csv'):
            with open(args.input_list, 'r') as csv_file:
                csv_reader = csv.reader(csv_file)
                les_list = [f[0] for f in csv_reader]
        else:
            # default delimiter is ' ', it might need to be changed
            les_list = np.loadtxt(args.input_list, dtype=str, delimiter=' ')

    if os.path.isdir(args.output):
        list_file_path = os.path.join(args.output, output_list_filename)
    else:
        try:
            pathlib.Path(args.output).touch()
        except OSError as err:
            raise OSError("OS error with path [{0}]: {1}".format(args.output, err))
        list_file_path = args.output

    if not os.path.isfile(args.synth_dict):
        raise ValueError('[{}] is not an existing synthetic lesion dict')
    try:
        json_file = open(args.synth_dict, 'r')
        synth_lesion_size_dict = json.load(json_file)
    except ValueError as e:
        raise e
    except OSError as err:
        raise OSError("OS error with path [{0}]: {1}".format(args.synth_dict, err))

    print(list_synth_les(synth_lesion_size_dict, 2000, 3, args.size_range, args.pickup_strat))
    print(list_synth_les(synth_lesion_size_dict, 4000, 3, 10))


if __name__ == '__main__':
    main()
